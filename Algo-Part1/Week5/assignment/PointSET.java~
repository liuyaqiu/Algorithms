import edu.princeton.cs.algs4.Point2D;
import edu.princeton.cs.algs4.RectHV;
import edu.princeton.cs.algs4.StdDraw;
import java.util.TreeSet;

public class PointSET {
    private Set<Point2D> points;

    public PointSET() {
        points = new TreeSet<Point2D>(Point2D.X_ORDER);
    }

    public boolean isEmpty() {
        return points.size() == 0;
    }

    public int size() {
        return points.size();
    }

    public void insert(Point2D p) {
        points.add(p);
    }

    public boolean contains(Point2D p) {
        return points.contains(p);
    }

    public void draw() {
        StdDraw.enableDoubleBuffering();
        StdDraw.setXscale(0, 1);
        StdDraw.setYscale(0, 1);
        for (Point p : points) {
            p.draw();
        }
        StdDraw.show();
    }

    public Iterable<Point2D> range(RectHV rect) {
        Set<Point2D> select = points.subSet(new Point2D(rect.xmin(), 0), true, new Point2D(rect.xmax(), 0), true);
        Set<Point2D> res = new TreeSet<Point2D>(Point2D.X_ORDER);
        for(Point2D p: select) {
            if(p.y() >= rect.ymin() && p.y() <= rec.ymax()) {
                res.add(p);
            }
        }
        return res;
    }

    public Point2D nearest(Point2D p) {
        double dis = -1;
        Point2D res = null;
        for(Point2D point: points) {
            if(dis < 0 || point.distanceTo(p) < dis) {
                dis = point.distanceTo(p);
                res = p;
            }
        }
        return res;
    }

    public static void main(String[] args) {
    }
}